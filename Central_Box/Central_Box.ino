#include "arduino_secrets.h"
/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/a7cab9ef-7ba9-4511-a503-8974815c0bac 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  - No variables have been created, add cloud variables on the Thing Setup page
    to see them declared here

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"

#include <SPI.h>
#include <nRF24L01.h>
#include <RF24.h>
#include <stdio.h>
#include <string.h>

RF24 radio(2,15);
const byte address[6] = "00001";

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(115200);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500);

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information you’ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();

  radio.begin();
  sendMode(); //모듈을 송신기로 설정
}
bool ok;
void loop() {
  ArduinoCloud.update();
  // Your code here 
  char text[20] = "hi";
  radio.write(&text, sizeof(text));
  Serial.print("sended : ");
  Serial.println(text);

  radio.openReadingPipe(0, address);
  radio.startListening();

  reciveMode();
  while(true)
  {
    if(radio.available())
    {
      char recive[20];
      radio.read(&recive, sizeof(recive));
      Serial.print("catched : ");
      Serial.println(recive);
      break;
    }
  }
  sendMode();
  
  delay(1000);
}

void sendMode(){
  radio.openWritingPipe(address); //이전에 설정한 5글자 문자열인 데이터를 보낼 수신의 주소를 설정
  radio.setPALevel(RF24_PA_MIN); //전원공급에 관한 파워레벨을 설정합니다. 모듈 사이가 가까우면 최소로 설정합니다.
  radio.stopListening();
  Serial.println("send_mode");
}
void reciveMode(){
  radio.openReadingPipe(0,address); //이전에 설정한 5글자 문자열인 데이터를 보낼 수신의 주소를 설정
  radio.setPALevel(RF24_PA_MIN); //전원공급에 관한 파워레벨을 설정합니다. 모듈 사이가 가까우면 최소로 설정합니다.
  radio.startListening();
  Serial.println("recive_mode");
}